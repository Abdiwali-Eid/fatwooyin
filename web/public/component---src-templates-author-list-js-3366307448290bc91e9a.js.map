{"version":3,"file":"component---src-templates-author-list-js-3366307448290bc91e9a.js","mappings":"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","sources":["webpack://fatwo-hub/../src/image-utils.ts","webpack://fatwo-hub/../src/components/hooks.ts","webpack://fatwo-hub/../src/components/layout-wrapper.tsx","webpack://fatwo-hub/../src/components/picture.tsx","webpack://fatwo-hub/../src/components/placeholder.tsx","webpack://fatwo-hub/../src/components/main-image.tsx","webpack://fatwo-hub/../src/components/gatsby-image.server.tsx","webpack://fatwo-hub/../src/components/gatsby-image.browser.tsx","webpack://fatwo-hub/../src/components/static-image.server.tsx","webpack://fatwo-hub/../src/components/static-image.tsx","webpack://fatwo-hub/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://fatwo-hub/./src/styles/PageHeaderStyles.js","webpack://fatwo-hub/./src/components/PageHeader.js","webpack://fatwo-hub/./src/styles/PageSpaceStyles.js","webpack://fatwo-hub/./src/components/PageSpace.js","webpack://fatwo-hub/./src/styles/PaginationStyles.js","webpack://fatwo-hub/./src/components/Pagination.js","webpack://fatwo-hub/./src/styles/author/AuthorGridStyles.js","webpack://fatwo-hub/./src/styles/author/AuthorItemStyles.js","webpack://fatwo-hub/./src/components/author/AuthorItem.js","webpack://fatwo-hub/./src/components/author/AuthorGrid.js","webpack://fatwo-hub/./src/templates/author-list.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import styled from 'styled-components';\r\n\r\nexport const PageHeaderStyles = styled.div`\r\n  margin: 3rem 0;\r\n  max-width: 400px;\r\n`;\r\n","import React from 'react';\r\nimport { PageHeaderStyles } from '../styles/PageHeaderStyles';\r\nimport ParagraphText from './typography/ParagraphText';\r\nimport { SectionTitle } from './typography/Title';\r\n\r\nfunction PageHeader({ title, description, children, className }) {\r\n  return (\r\n    <div className={className}>\r\n      <PageHeaderStyles>\r\n        <SectionTitle style={{ color: 'white', paddingLeft: '10px' }}>\r\n          {title}\r\n        </SectionTitle>\r\n        <ParagraphText style={{ color: 'white', paddingLeft: '10px' }}>\r\n          {description}\r\n\r\n          {children}\r\n        </ParagraphText>\r\n      </PageHeaderStyles>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PageHeader;\r\n","import styled from 'styled-components';\r\n\r\nexport const PageSpaceStyles = styled.div`\r\n  padding-top: ${(props) => props.top || 100}px;\r\n  padding-bottom: ${(props) => props.bottom || 100}px;\r\n`;\r\n","import React from 'react';\r\nimport { PageSpaceStyles } from '../styles/PageSpaceStyles';\r\n\r\nfunction PageSpace({ top, bottom, children }) {\r\n  return (\r\n    <PageSpaceStyles top={top} bottom={bottom}>\r\n      {children}\r\n    </PageSpaceStyles>\r\n  );\r\n}\r\n\r\nexport default PageSpace;\r\n","import styled from 'styled-components';\r\n\r\nexport const PaginationStyles = styled.div`\r\n  text-align: center;\r\n  margin-top: 5rem;\r\n  .icons {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 1rem;\r\n    margin-bottom: 1rem;\r\n    a {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-size: 1.6rem;\r\n      background: var(--gray);\r\n      padding: 0.8rem;\r\n      border-radius: 4px;\r\n      svg {\r\n        padding: 0;\r\n        margin: 0;\r\n      }\r\n      &.disabled {\r\n        opacity: 0.2;\r\n        pointer-events: none;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport clsx from 'clsx';\r\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\r\nimport { PaginationStyles } from '../styles/PaginationStyles';\r\nimport ParagraphText from './typography/ParagraphText';\r\n\r\nfunction Pagination({ baseURL, numberOfPages, currentPage }) {\r\n  const prevPage = currentPage - 1 <= 1 ? '' : (currentPage - 1).toString();\r\n  const nextPage = (currentPage + 1).toString();\r\n  return (\r\n    <div className=\"container\">\r\n      <PaginationStyles>\r\n        <div className=\"icons\">\r\n          <Link\r\n            to={`${baseURL}/${prevPage}`}\r\n            className={clsx(currentPage <= 1 && 'disabled')}\r\n          >\r\n            <FiChevronLeft /> Prev\r\n          </Link>\r\n          <Link\r\n            to={`${baseURL}/${nextPage}`}\r\n            className={clsx(currentPage >= numberOfPages && 'disabled')}\r\n          >\r\n            Next <FiChevronRight />\r\n          </Link>\r\n        </div>\r\n        <ParagraphText>\r\n          page {currentPage} of {numberOfPages} pages\r\n        </ParagraphText>\r\n      </PaginationStyles>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import styled from 'styled-components';\r\n\r\nexport const AuthorGridStyles = styled.div`\r\n  display: grid;\r\n  margin-top: 3.5rem;\r\n  display: grid;\r\n  gap: 1rem;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  @media only screen and (max-width: 768px) {\r\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n    gap: 2rem;\r\n  }\r\n`;\r\n","import { Link } from 'gatsby';\r\nimport styled from 'styled-components';\r\n\r\nexport const AuthorItemStyles = styled(Link)`\r\n  background-color: var(--black-2);\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n  gap: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  .profileImage {\r\n    height: 30px;\r\n    width: 30px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { GatsbyImage } from 'gatsby-plugin-image';\r\nimport { AuthorItemStyles } from '../../styles/author/AuthorItemStyles';\r\nimport { Title } from '../typography/Title';\r\n\r\nfunction AuthorItem({ name, slug, profileImage }) {\r\n  return (\r\n    <AuthorItemStyles className=\"author-item\" to={slug.current}>\r\n      <GatsbyImage\r\n        image={profileImage.asset.gatsbyImageData}\r\n        alt={profileImage.alt}\r\n        className=\"profileImage\"\r\n      />\r\n      <Title>{name}</Title>\r\n    </AuthorItemStyles>\r\n  );\r\n}\r\n\r\nexport default AuthorItem;\r\n","import React from 'react';\r\nimport { AuthorGridStyles } from '../../styles/author/AuthorGridStyles';\r\nimport AuthorItem from './AuthorItem';\r\n\r\nfunction AuthorGrid({ authors }) {\r\n  return (\r\n    <AuthorGridStyles>\r\n      {authors.map((item) => (\r\n        <AuthorItem\r\n          key={item.id}\r\n          name={item.name}\r\n          slug={item.slug}\r\n          profileImage={item.profileImage}\r\n        />\r\n      ))}\r\n    </AuthorGridStyles>\r\n  );\r\n}\r\n\r\nexport default AuthorGrid;\r\n","import { graphql } from 'gatsby';\r\nimport React from 'react';\r\nimport AuthorGrid from '../components/author/AuthorGrid';\r\nimport PageHeader from '../components/PageHeader';\r\nimport PageSpace from '../components/PageSpace';\r\nimport Pagination from '../components/Pagination';\r\nimport SEO from '../components/seo';\r\n\r\nexport const AuthorsQuery = graphql`\r\n  query authorQuery($limit: Int!, $offset: Int!) {\r\n    allSanityAuthor(limit: $limit, skip: $offset) {\r\n      nodes {\r\n        id\r\n        name\r\n        slug {\r\n          current\r\n        }\r\n        profileImage {\r\n          alt\r\n          asset {\r\n            gatsbyImageData\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction AuthorList({ data, pageContext }) {\r\n  const authors = data.allSanityAuthor.nodes;\r\n  const { currentPage, numberOfPages } = pageContext;\r\n\r\n  return (\r\n    <PageSpace top={80} bottom={100}>\r\n      <SEO title=\"Authors\" />\r\n      <div className=\"container\">\r\n        <PageHeader\r\n          title=\"All Authors\"\r\n          description=\"This month will bring about the 88th Academy Awards. Starting in 1928, this prestigious award ceremony...\"\r\n        />\r\n        <AuthorGrid authors={authors} />\r\n        {numberOfPages > 1 && (\r\n          <Pagination\r\n            baseURL=\"/authors\"\r\n            currentPage={currentPage}\r\n            numberOfPages={numberOfPages}\r\n          />\r\n        )}\r\n      </div>\r\n    </PageSpace>\r\n  );\r\n}\r\n\r\nexport default AuthorList;\r\n"],"names":["g","p","m","f","e","console","warn","w","message","t","y","map","src","width","join","b","lastIndexOf","a","slice","length","v","layout","height","i","sourceMetadata","r","breakpoints","n","aspectRatio","s","formats","o","toLowerCase","l","u","Math","round","k","Array","from","Set","concat","_toConsumableArray","sort","S","_ref3","fit","outputPixelDensities","d","$","min","h","filter","includes","push","sizes","presentationWidth","presentationHeight","unscaledWidth","Number","MAX_SAFE_INTEGER","max","I","N","HTMLImageElement","prototype","_","baseUrl","urlBuilder","sourceWidth","sourceHeight","pluginName","options","c","generateImageSource","filename","reporter","backgroundColor","placeholderURL","Error","format","E","size","has","delete","add","M","Object","entries","_ref","_ref2","sources","x","forEach","Boolean","find","fallback","srcSet","type","images","placeholder","j","loading","shouldLoad","style","opacity","O","position","top","left","bottom","right","objectFit","objectPosition","transition","z","D","_ref5","paddingTop","maxWidth","display","alt","role","A","children","q","P","H","decoding","G","_ref6","media","key","V","propTypes","isRequired","displayName","B","F","U","Y","_len","arguments","_key","apply","X","image","J","Z","K","Q","ee","te","as","className","class","onStartLoad","onLoad","onError","JSON","stringify","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","ie","re","_len2","_key2","ne","se","oe","__imageData","__error","camelCase","input","isArray","TypeError","assign","pascalCase","trim","toUpperCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","preserveCamelCase","replace","p1","charAt","module","exports","PageHeaderStyles","styled","div","withConfig","componentId","title","description","React","SectionTitle","color","paddingLeft","ParagraphText","PageSpaceStyles","props","PaginationStyles","baseURL","numberOfPages","currentPage","prevPage","toString","nextPage","Link","to","clsx","FiChevronLeft","FiChevronRight","AuthorGridStyles","AuthorItemStyles","name","slug","profileImage","GatsbyImage","asset","gatsbyImageData","Title","authors","item","AuthorItem","id","data","pageContext","allSanityAuthor","nodes","PageSpace","SEO","PageHeader","AuthorGrid","Pagination"],"sourceRoot":""}